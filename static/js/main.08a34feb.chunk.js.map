{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","evaluate","currentOperand","previousOperand","prev","parseFloat","current","isNaN","computation","toString","reducer","state","overwrite","includes","length","slice","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","class","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LACe,SAASA,EAAT,GAA2C,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC9C,OAAO,wBAAQC,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQC,UAAWC,QAAS,CAAEL,YAAtE,SAAmFA,ICD7E,SAASM,EAAT,GAAmD,IAAxBP,EAAuB,EAAvBA,SAAUQ,EAAa,EAAbA,UAClD,OAAO,wBAAQN,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQK,iBAAkBH,QAAS,CAAEE,gBAA7E,SAA8FA,I,UCI1FJ,EAAU,CACrBC,UAAW,YACXI,iBAAkB,mBAClBC,MAAO,QACPC,aAAc,eACdC,SAAU,YAGNC,EAAW,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,eAAgBC,EAAiC,EAAjCA,gBAAiBP,EAAgB,EAAhBA,UAC7CQ,EAAOC,WAAWF,GAClBG,EAAUD,WAAWH,GAE3B,GAAIK,MAAMH,IAASG,MAAMD,GAAU,MAAO,GAE1C,IAAIE,EAAc,GAElB,OAAQZ,GACN,IAAK,IACHY,EAAcJ,EAAOE,EACrB,MACF,IAAK,IACHE,EAAcJ,EAAOE,EACrB,MACF,IAAK,IACHE,EAAcJ,EAAOE,EACrB,MACF,IAAK,OACHE,EAAcJ,EAAOE,EAIzB,OAAOE,EAAYC,YAGfC,EAAU,SAACC,EAAD,GAA+B,IAArBpB,EAAoB,EAApBA,KAAMG,EAAc,EAAdA,QAC9B,OAAQH,GACN,KAAKC,EAAQC,UACX,OAAIkB,EAAMC,UACD,2BACFD,GADL,IAEET,eAAgBR,EAAQL,MACxBuB,WAAW,IAGO,MAAlBlB,EAAQL,OAA0C,MAAzBsB,EAAMT,gBAGb,MAAlBR,EAAQL,OAAiBsB,EAAMT,eAAeW,SAAS,KAFlDF,EAMF,2BACFA,GADL,IAEET,eAAe,GAAD,OAAKS,EAAMT,gBAAkB,IAA7B,OAAkCR,EAAQL,SAE5D,KAAKG,EAAQK,iBACX,OAA4B,MAAxBc,EAAMT,gBAAmD,MAAzBS,EAAMR,gBACjCQ,EAGmB,MAAxBA,EAAMT,eACD,2BACFS,GADL,IAEEf,UAAWF,EAAQE,YAIM,MAAzBe,EAAMR,gBACD,2BACFQ,GADL,IAEEf,UAAWF,EAAQE,UACnBO,gBAAiBQ,EAAMT,eACvBA,eAAgB,OAIb,2BACFS,GADL,IAEER,gBAAiBF,EAASU,GAC1Bf,UAAWF,EAAQE,UACnBM,eAAgB,OAEpB,KAAKV,EAAQM,MACX,MAAO,GACT,KAAKN,EAAQO,aACX,OAAIY,EAAMC,UACD,2BACFD,GADL,IAEEC,WAAW,EACXV,eAAgB,OAGQ,MAAxBS,EAAMT,eAA+BS,EACL,IAAhCA,EAAMT,eAAeY,OAChB,2BAAKH,GAAZ,IAAmBT,eAAgB,OAG9B,2BACFS,GADL,IAEET,eAAgBS,EAAMT,eAAea,MAAM,GAAI,KAEnD,KAAKvB,EAAQQ,SACX,OAAuB,MAAnBW,EAAMf,WAA6C,MAAxBe,EAAMT,gBAAmD,MAAzBS,EAAMR,gBAC5DQ,EAGF,2BACFA,GADL,IAEEC,WAAW,EACXT,gBAAiB,KACjBP,UAAW,KACXM,eAAgBD,EAASU,OAK3BK,EAAoB,IAAIC,KAAKC,aAAa,QAAS,CACvDC,sBAAuB,IAGnBC,EAAgB,SAACC,GACrB,GAAe,MAAXA,EAAJ,CACA,MAA2BA,EAAQC,MAAM,KAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,OAAe,MAAXA,EAAwBR,EAAkBS,OAAOF,GAC/C,GAAN,OAAUP,EAAkBS,OAAOF,GAAnC,YAA+CC,KAyClCE,EAtCH,WACV,MAAkDC,qBAAWjB,EAAS,IAAtE,0BAASR,EAAT,EAASA,eAAgBN,EAAzB,EAAyBA,UAAaR,EAAtC,KAEA,OACE,sBAAKwC,UAAU,aAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,gCAAMR,EAAclB,GAApB,IAAsCN,OAExC,sBAAKgC,UAAU,SAAf,UACE,cAACjC,EAAD,CAAiBC,UAAU,IAAIR,SAAUA,IACzC,cAACO,EAAD,CAAiBkC,MAAM,WAAWjC,UAAU,IAAIR,SAAUA,IAC1D,cAACO,EAAD,CAAiBkC,MAAM,WAAWjC,UAAU,IAAIR,SAAUA,IAC1D,cAACO,EAAD,CAAiBkC,MAAM,WAAWjC,UAAU,OAAIR,SAAUA,IAC1D,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IAEjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IAEjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IAEjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAa0C,MAAM,UAAUxC,MAAM,IAAID,SAAUA,IACjD,wBAAQyC,MAAM,aAAavC,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQQ,YAAnE,eAGA,wBAAQ6B,MAAM,YAAYvC,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQM,SAAlE,uBC/JRgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.08a34feb.chunk.js","sourcesContent":["import { ACTIONS } from './App';\nexport default function DigitButton({ dispatch, digit }) {\n  return <button onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}>{digit}</button>;\n}\n","import { ACTIONS } from './App';\nexport default function OperationButton({ dispatch, operation }) {\n  return <button onClick={() => dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })}>{operation}</button>;\n}","/* eslint-disable default-case */\nimport { useReducer } from 'react';\nimport DigitButton from './DigitButton';\nimport OperationButton from './OperationButton';\nimport './styles.css';\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate',\n};\n\nconst evaluate = ({ currentOperand, previousOperand, operation }) => {\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n\n  if (isNaN(prev) || isNaN(current)) return '';\n\n  let computation = '';\n\n  switch (operation) {\n    case '+':\n      computation = prev + current;\n      break;\n    case '-':\n      computation = prev - current;\n      break;\n    case '*':\n      computation = prev * current;\n      break;\n    case 'รท':\n      computation = prev / current;\n      break;\n  }\n\n  return computation.toString();\n};\n\nconst reducer = (state, { type, payload }) => {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === '0' && state.currentOperand === '0') {\n        return state;\n      }\n      if (payload.digit === '.' && state.currentOperand.includes('.')) {\n        return state;\n      }\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || ''}${payload.digit}`,\n      };\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      };\n    case ACTIONS.CLEAR:\n      return {};\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return { ...state, currentOperand: null };\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1),\n      };\n    case ACTIONS.EVALUATE:\n      if (state.operation == null || state.currentOperand == null || state.previousOperand == null) {\n        return state;\n      }\n\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      };\n  }\n};\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat('en-us', {\n  maximumFractionDigits: 0,\n});\n\nconst formatOperand = (operand) => {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split('.');\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n};\n\nconst App = () => {\n  const [{ currentOperand, operation }, dispatch] = useReducer(reducer, {});\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"calculator-screen\">\n        <div>{formatOperand(currentOperand)} {operation}</div>\n      </div>\n      <div className=\"keypad\">\n        <OperationButton operation=\"+\" dispatch={dispatch} />\n        <OperationButton class=\"operator\" operation=\"-\" dispatch={dispatch} />\n        <OperationButton class=\"operator\" operation=\"*\" dispatch={dispatch} />\n        <OperationButton class=\"operator\" operation=\"รท\" dispatch={dispatch} />\n        <DigitButton digit=\"7\" dispatch={dispatch} />\n        <DigitButton digit=\"8\" dispatch={dispatch} />\n        <DigitButton digit=\"9\" dispatch={dispatch} />\n\n        <DigitButton digit=\"4\" dispatch={dispatch} />\n        <DigitButton digit=\"5\" dispatch={dispatch} />\n        <DigitButton digit=\"6\" dispatch={dispatch} />\n\n        <DigitButton digit=\"1\" dispatch={dispatch} />\n        <DigitButton digit=\"2\" dispatch={dispatch} />\n        <DigitButton digit=\"3\" dispatch={dispatch} />\n\n        <DigitButton digit=\"0\" dispatch={dispatch} />\n        <DigitButton class=\"decimal\" digit=\".\" dispatch={dispatch} />\n        <button class=\"equal-sign\" onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>\n          =\n        </button>\n        <button class=\"all-clear\" onClick={() => dispatch({ type: ACTIONS.CLEAR })}>\n          AC\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}